//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace WebApplication
{
#pragma warning disable

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
	public partial class ArkuszServiceHttpClient
	{
		private string _baseUrl = "";
		private System.Net.Http.HttpClient _httpClient;
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

		public ArkuszServiceHttpClient(string baseUrl, System.Net.Http.HttpClient httpClient)
		{
			BaseUrl = baseUrl;
			_httpClient = httpClient;
			_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
			{
				var settings = new Newtonsoft.Json.JsonSerializerSettings();
				UpdateJsonSerializerSettings(settings);
				return settings;
			});
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set { _baseUrl = value; }
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <summary>Usuń podkategorie o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task DeleteAsync10(int? id)
		{
			return DeleteAsync10(id, System.Threading.CancellationToken.None);
		}

		/// <summary>Usuń podkategorie o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task DeleteAsync10(int? id, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiKategoria/UsunWskazanaPodkategorie?");
			if (id != null)
			{
				urlBuilder_.Append("id=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}
		/// <summary>Stwórz nową podkategorie</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<int> PostAsync10(NowaPodkategoria pkat)
		{
			return PostAsync10(pkat, System.Threading.CancellationToken.None);
		}

		/// <summary>Stwórz nową podkategorie</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<int> PostAsync10(NowaPodkategoria pkat, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiKategoria/DodajNowaPodkategorie");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(pkat, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(int);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<int>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(int);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}


		/// <summary>Metoda wyświetlająca z bazy wszystkie podkategorie</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Podkategorie>> GetAllAsync10()
		{
			return GetAllAsync10(System.Threading.CancellationToken.None);
		}

		/// <summary>Metoda wyświetlająca z bazy wszystkie podkategorie</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Podkategorie>> GetAllAsync10(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiKategoria/WylistujPodkategorie");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.Generic.ICollection<Podkategorie>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<Podkategorie>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.Generic.ICollection<Podkategorie>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Metoda wyświetlająca z bazy wszystkie kategorie</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Kategorie>> GetAllAsync()
		{
			return GetAllAsync(System.Threading.CancellationToken.None);
		}

		/// <summary>Metoda wyświetlająca z bazy wszystkie kategorie</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Kategorie>> GetAllAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiKategoria/WylistujKategorie");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.Generic.ICollection<Kategorie>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<Kategorie>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.Generic.ICollection<Kategorie>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Stwórz nową Kategorie</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<int> PostAsync(NowaKategoria kat)
		{
			return PostAsync(kat, System.Threading.CancellationToken.None);
		}

		/// <summary>Stwórz nową Kategorie</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<int> PostAsync(NowaKategoria kat, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiKategoria/DodajNowaKategorie");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(kat, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(int);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<int>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(int);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Usuń kategorie o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task DeleteAsync(int? id)
		{
			return DeleteAsync(id, System.Threading.CancellationToken.None);
		}

		/// <summary>Usuń kategorie o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task DeleteAsync(int? id, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiKategoria/UsunWskazanaKategorie?");
			if (id != null)
			{
				urlBuilder_.Append("id=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Metoda wyświetlająca z bazy wszystkie transakcje</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transakcje>> GetAsync()
		{
			return GetAsync(System.Threading.CancellationToken.None);
		}

		/// <summary>Metoda wyświetlająca z bazy wszystkie transakcje</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transakcje>> GetAsync(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiTranskacja/WylistujTransakcje");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.Generic.ICollection<Transakcje>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<Transakcje>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.Generic.ICollection<Transakcje>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Stwórz nową Transakcję</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<int> Post2Async(NowaTransakcja tr)
		{
			return Post2Async(tr, System.Threading.CancellationToken.None);
		}

		/// <summary>Stwórz nową Transakcję</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<int> Post2Async(NowaTransakcja tr, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiTranskacja/DodajNowaTransakcje");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(tr, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(int);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<int>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(int);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Usuń transakcje o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task Delete2Async(int? id)
		{
			return Delete2Async(id, System.Threading.CancellationToken.None);
		}

		/// <summary>Usuń transakcje o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task Delete2Async(int? id, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiTranskacja/UsunWskazanaTransakcje?");
			if (id != null)
			{
				urlBuilder_.Append("id=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Znajdź transakcje o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<Transakcje> Get2Async(int? id)
		{
			return Get2Async(id, System.Threading.CancellationToken.None);
		}

		/// <summary>Znajdź transakcje o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<Transakcje> Get2Async(int? id, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiTranskacja/PokazWybranaTransakcje?");
			if (id != null)
			{
				urlBuilder_.Append("id=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(Transakcje);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Transakcje>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(Transakcje);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Metoda wyświetlająca z bazy wszystkich użytkowników</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Uzytkownik>> Get3Async()
		{
			return Get3Async(System.Threading.CancellationToken.None);
		}

		/// <summary>Metoda wyświetlająca z bazy wszystkich użytkowników</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Uzytkownik>> Get3Async(System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiUzytkownik/WylistujUzytkownikow");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.Generic.ICollection<Uzytkownik>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<Uzytkownik>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(System.Collections.Generic.ICollection<Uzytkownik>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Znajdź użytkownika o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<Uzytkownik> Get4Async(int? id)
		{
			return Get4Async(id, System.Threading.CancellationToken.None);
		}

		/// <summary>Znajdź użytkownika o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<Uzytkownik> Get4Async(int? id, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiUzytkownik/PokazWybranegoUzytkownika?");
			if (id != null)
			{
				urlBuilder_.Append("id=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(Uzytkownik);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Uzytkownik>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(Uzytkownik);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Stwórz nowego Użytkownika</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<int> Post3Async(NowyUzytkownik uz)
		{
			return Post3Async(uz, System.Threading.CancellationToken.None);
		}

		/// <summary>Stwórz nowego Użytkownika</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task<int> Post3Async(NowyUzytkownik uz, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiUzytkownik/DodajNowegoUzytkownika");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(uz, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(int);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<int>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception_)
							{
								throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}

						return default(int);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <summary>Usuń użytkownika o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task Delete3Async(int? id)
		{
			return Delete3Async(id, System.Threading.CancellationToken.None);
		}

		/// <summary>Usuń użytkownika o danym ID</summary>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		public async System.Threading.Tasks.Task Delete3Async(int? id, System.Threading.CancellationToken cancellationToken)
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WebApiUzytkownik/UsunWskazanegoUzytkownika?");
			if (id != null)
			{
				urlBuilder_.Append("id=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("DELETE");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value is System.Enum)
			{
				string name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value != null && value.GetType().IsArray)
			{
				var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
				return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
			}

			return System.Convert.ToString(value, cultureInfo);
		}
	}


	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
	public partial class Kategorie
	{
		[Newtonsoft.Json.JsonProperty("katId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? KatId { get; set; }

		[Newtonsoft.Json.JsonProperty("kategoria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Kategoria { get; set; }

		[Newtonsoft.Json.JsonProperty("podkategorie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Podkategorie> Podkategorie { get; set; }

		[Newtonsoft.Json.JsonProperty("transakcje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Transakcje> Transakcje { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Kategorie FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Kategorie>(data);
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
	public partial class Podkategorie
	{
		[Newtonsoft.Json.JsonProperty("podId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PodId { get; set; }

		[Newtonsoft.Json.JsonProperty("idKategorii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdKategorii { get; set; }

		[Newtonsoft.Json.JsonProperty("podkategoria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Podkategoria { get; set; }

		[Newtonsoft.Json.JsonProperty("idKategoriiNavigation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Kategorie IdKategoriiNavigation { get; set; }

		[Newtonsoft.Json.JsonProperty("transakcje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Transakcje> Transakcje { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Podkategorie FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Podkategorie>(data);
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
	public partial class Transakcje
	{
		[Newtonsoft.Json.JsonProperty("transId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? TransId { get; set; }

		[Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? Data { get; set; }

		[Newtonsoft.Json.JsonProperty("idUzytkownika", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdUzytkownika { get; set; }

		[Newtonsoft.Json.JsonProperty("idKategorii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdKategorii { get; set; }

		[Newtonsoft.Json.JsonProperty("idPodkategorii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdPodkategorii { get; set; }

		[Newtonsoft.Json.JsonProperty("kwota", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Kwota { get; set; }

		[Newtonsoft.Json.JsonProperty("idKategoriiNavigation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Kategorie IdKategoriiNavigation { get; set; }

		[Newtonsoft.Json.JsonProperty("idPodkategoriiNavigation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Podkategorie IdPodkategoriiNavigation { get; set; }

		[Newtonsoft.Json.JsonProperty("idUzytkownikaNavigation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Uzytkownik IdUzytkownikaNavigation { get; set; }

		[Newtonsoft.Json.JsonProperty("plan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Plan> Plan { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Transakcje FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Transakcje>(data);
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
	public partial class Uzytkownik
	{
		[Newtonsoft.Json.JsonProperty("uzytId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? UzytId { get; set; }

		[Newtonsoft.Json.JsonProperty("imie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Imie { get; set; }

		[Newtonsoft.Json.JsonProperty("nazwisko", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Nazwisko { get; set; }

		[Newtonsoft.Json.JsonProperty("nick", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Nick { get; set; }

		[Newtonsoft.Json.JsonProperty("eMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string EMail { get; set; }

		[Newtonsoft.Json.JsonProperty("dataDodania", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? DataDodania { get; set; }

		[Newtonsoft.Json.JsonProperty("ostatnieLogowanie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? OstatnieLogowanie { get; set; }

		[Newtonsoft.Json.JsonProperty("dataUsuniecia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? DataUsuniecia { get; set; }

		[Newtonsoft.Json.JsonProperty("plan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Plan> Plan { get; set; }

		[Newtonsoft.Json.JsonProperty("transakcje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Transakcje> Transakcje { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Uzytkownik FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Uzytkownik>(data);
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
	public partial class Plan
	{
		[Newtonsoft.Json.JsonProperty("planId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? PlanId { get; set; }

		[Newtonsoft.Json.JsonProperty("miesiąc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? Miesiąc { get; set; }

		[Newtonsoft.Json.JsonProperty("zalozonaKwota", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? ZalozonaKwota { get; set; }

		[Newtonsoft.Json.JsonProperty("faktycznaKwota", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? FaktycznaKwota { get; set; }

		[Newtonsoft.Json.JsonProperty("idUzytkownika", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdUzytkownika { get; set; }

		[Newtonsoft.Json.JsonProperty("idTransakcji", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdTransakcji { get; set; }

		[Newtonsoft.Json.JsonProperty("idTransakcjiNavigation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Transakcje IdTransakcjiNavigation { get; set; }

		[Newtonsoft.Json.JsonProperty("idUzytkownikaNavigation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Uzytkownik IdUzytkownikaNavigation { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static Plan FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<Plan>(data);
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
	public partial class NowaKategoria
	{
		[Newtonsoft.Json.JsonProperty("kategoria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Kategoria { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static NowaKategoria FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<NowaKategoria>(data);
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
	public partial class NowaPodkategoria
	{
		[Newtonsoft.Json.JsonProperty("idKategorii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdKategorii { get; set; }

		[Newtonsoft.Json.JsonProperty("podkategoria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Podkategoria { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static NowaPodkategoria FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<NowaPodkategoria>(data);
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
	public partial class NowaTransakcja
	{
		[Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? Data { get; set; }

		[Newtonsoft.Json.JsonProperty("idUzytkownika", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdUzytkownika { get; set; }

		[Newtonsoft.Json.JsonProperty("idKategorii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdKategorii { get; set; }

		[Newtonsoft.Json.JsonProperty("idPodkategorii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? IdPodkategorii { get; set; }

		[Newtonsoft.Json.JsonProperty("kwota", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public double? Kwota { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static NowaTransakcja FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<NowaTransakcja>(data);
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
	public partial class NowyUzytkownik
	{
		[Newtonsoft.Json.JsonProperty("imie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Imie { get; set; }

		[Newtonsoft.Json.JsonProperty("nazwisko", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Nazwisko { get; set; }

		[Newtonsoft.Json.JsonProperty("nick", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Nick { get; set; }

		[Newtonsoft.Json.JsonProperty("eMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string EMail { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static NowyUzytkownik FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<NowyUzytkownik>(data);
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
	public partial class SwaggerException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
			: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
	public partial class SwaggerException<TResult> : SwaggerException
	{
		public TResult Result { get; private set; }

		public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
			: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

#pragma warning restore
}